{
  "info": {
    "name": "Canvas Student MCP",
    "description": "Complete API collection for Canvas Student MCP server",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.variables.get('baseUrl')) {",
          "    pm.variables.set('baseUrl', 'http://localhost:8000');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "username",
      "value": "your.email@school.edu",
      "type": "string"
    },
    {
      "key": "password",
      "value": "your_password",
      "type": "string"
    },
    {
      "key": "courseId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "moduleId",
      "value": "101",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Server Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Check if the server is running"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/",
                  "host": ["{{baseUrl}}"],
                  "path": [""]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"message\": \"Authentication Server is running\",\n  \"status\": \"OK\"\n}"
            }
          ]
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Detailed health check endpoint"
          }
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Save token for future requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.token) {",
                  "        pm.variables.set('authToken', response.token);",
                  "        console.log('Authentication successful, token saved');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authenticate",
              "host": ["{{baseUrl}}"],
              "path": ["authenticate"]
            },
            "description": "Authenticate with Canvas credentials"
          }
        }
      ]
    },
    {
      "name": "Courses",
      "item": [
        {
          "name": "List All Courses",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Save first course ID for other requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.courses && response.courses.length > 0) {",
                  "        pm.variables.set('courseId', response.courses[0].id.toString());",
                  "        console.log('First course ID saved:', response.courses[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/courses",
              "host": ["{{baseUrl}}"],
              "path": ["courses"]
            },
            "description": "Get all enrolled courses"
          }
        },
        {
          "name": "Get Specific Course",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/courses/{{courseId}}",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{courseId}}"]
            },
            "description": "Get details for a specific course"
          }
        }
      ]
    },
    {
      "name": "Modules",
      "item": [
        {
          "name": "Get Course Modules",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Save first module ID for other requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.modules && response.modules.length > 0) {",
                  "        pm.variables.set('moduleId', response.modules[0].id.toString());",
                  "        console.log('First module ID saved:', response.modules[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/courses/{{courseId}}/modules",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{courseId}}", "modules"]
            },
            "description": "Get all modules for a course"
          }
        },
        {
          "name": "Get Module Items",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/courses/{{courseId}}/modules/{{moduleId}}/items",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{courseId}}", "modules", "{{moduleId}}", "items"]
            },
            "description": "Get all items within a specific module"
          }
        }
      ]
    },
    {
      "name": "Assignments",
      "item": [
        {
          "name": "Get Course Assignments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/courses/{{courseId}}/assignments",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{courseId}}", "assignments"]
            },
            "description": "Get all assignments for a course"
          }
        }
      ]
    },
    {
      "name": "Course Corpus",
      "item": [
        {
          "name": "Build Course Corpus",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/courses/{{courseId}}/corpus/build",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "{{courseId}}", "corpus", "build"]
            },
            "description": "Build searchable corpus for course content"
          }
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Invalid Authentication",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"wrong@email.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authenticate",
              "host": ["{{baseUrl}}"],
              "path": ["authenticate"]
            },
            "description": "Test authentication with invalid credentials"
          }
        },
        {
          "name": "Non-existent Course",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/courses/99999",
              "host": ["{{baseUrl}}"],
              "path": ["courses", "99999"]
            },
            "description": "Test requesting a course that doesn't exist"
          }
        }
      ]
    }
  ]
}
